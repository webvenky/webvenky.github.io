I"q<h1 id="simulation-of-drones-reading-qr-codes-in-ware-houses">Simulation of drones reading QR codes in Ware-houses</h1>

<p>The repository can be accessed at <a href="https://github.com/webvenky/qr_scanning_drones">https://github.com/webvenky/qr_scanning_drones</a></p>

<h2 id="system-requirements">System Requirements</h2>
<ol>
  <li><strong>Install ROS and gazebo in the system</strong>
 I have used Ubuntu 14.04, ROS-indigo and Gazebo 7. Refer to http://wiki.ros.org/ROS/Installation for instructions.</li>
  <li><strong>Install libquirc</strong>
 Download the package <strong>libquirc</strong> â€“&gt; https://github.com/dlbeer/quirc
 (I will also include the package separately along with the code.)
 Installation instructions are available in the README file.
 You can test the library by <code class="language-plaintext highlighter-rouge">./qrtest qr_image_name.jpg</code></li>
</ol>

<h2 id="running-the-simulation">Running the simulation</h2>

<p>Make sure that you have run <code class="language-plaintext highlighter-rouge">catkin build</code> after you have placed the folders in the <code class="language-plaintext highlighter-rouge">src</code> folder in the <code class="language-plaintext highlighter-rouge">src</code> folder of your catkin workspace.</p>

<p><strong>World:</strong>
The description of the world is given in <code class="language-plaintext highlighter-rouge">wall_qr3.world</code> file.</p>

<p><strong>Models:</strong>
The models for the world file is given in the <code class="language-plaintext highlighter-rouge">QR_Simulation/models</code> folder. Place the models in the <code class="language-plaintext highlighter-rouge">~/.gazebo/models</code> folder.
The models contains models for several warehouse objects and the marker tags. If you want to change the marker tag, just replace the picture in the <code class="language-plaintext highlighter-rouge">materials/texture</code> folder in the marker models.</p>

<p><strong>UAV:</strong>
Firefly hexrotor is used as the platform for the simulation. I have used the model from the <code class="language-plaintext highlighter-rouge">rotors_simulation</code> package. (<strong>github_link</strong>)
The properties of the hexrotor is given in the <code class="language-plaintext highlighter-rouge">rotors_gazebo/resource/firefly_with_camera2.yaml</code> file. It is important to account for the mass of additional payloads (such as gimbal and camera) for accurate vertical positioning. Other parameters for the <code class="language-plaintext highlighter-rouge">lee_position_controller</code> (such as velocity gain and angular rate gain ) are given in the  <code class="language-plaintext highlighter-rouge">rotors_gazebo/resource/lee_controller_firefly.yaml</code> file.</p>

<p>Use this line to open the launch file. 
<code class="language-plaintext highlighter-rouge">roslaunch rotors_gazebo mav_qr_code_scan2.launch</code>.
This loads up the world with the hexrotor at (0.0, -5.0, 0.0) as per the lines:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &lt;arg name="x" default="0.0"/&gt;
  &lt;arg name="y" default="-5.0"/&gt;
  &lt;arg name="z" default="0.1"/&gt;
</code></pre></div></div>
<p>The simulation at the beginning looks like the image below:
<img class="size-medium wp-image-5866" src="../../../../../img/Pic1.bmp" alt="Simulation" width="600" height="400" /></p>

<p>The simulation is paused when it launches. When you press play, the UAV flies to the position (-2.5,-2.9,2.5) as per the line:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> &lt;node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="-2.5 -2.9 2.5 90 1"/&gt;
</code></pre></div></div>
<p>Lee position controller is utilized to position the UAV at the desired location. This controller is not a path planner. So use this controller only for minor changes in the position.</p>

<h2 id="navigation-of-uav-through-waypoint-publisher">Navigation of UAV through waypoint publisher</h2>

<p>The global path planning can be performed using a waypoint publisher node. Here the <code class="language-plaintext highlighter-rouge">waypoint_publisher_aisle</code> node is used to generate waypoints along a straight line at specified intervals. For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rosrun rotors_gazebo waypoint_publisher_aisle -2.5 -2.4 8.5 -2.4 20 2.5 90 __ns:=/firefly
</code></pre></div></div>
<p>generates 20 equally spaced waypoints  between  (-2.5,-2.4) and (8.5,-2.4) at an altitude of 1.0m. The UAV will also have a yaw orientation of 90 degrees. 
The source code of the  waypoint publisher node is in the <code class="language-plaintext highlighter-rouge">rotors_gazebo/src/waypoint_publisher_aisle.cpp </code> file.</p>

<h2 id="the-2-axis-gimbal-stabilizer">The 2-axis gimbal stabilizer</h2>

<p>The gimbal will stabilize the camera to look at the horizontal direction irrespective of the camera roll or pitch.</p>

<p>This node is launched as part of the launch file.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;node name="firefly_cam_hold_horizontal2" pkg="venky_controls" type="cam_hold_horizontal2" args="-robot firefly" /&gt;
</code></pre></div></div>
<p>The source code of the  gimbal stabilizer node is in the <code class="language-plaintext highlighter-rouge">venky_controls/src/cam_hold_horizontal2.cpp </code> file. The description of the gimbal and the camera properties (such as focal-length, resolution) is given in <code class="language-plaintext highlighter-rouge">rotors_description/urdf/firefly_camera_2axis_gimbal.xacro</code> file. The PID controller parameters are given in the <code class="language-plaintext highlighter-rouge">venky_controls/config/camera_2axis_gimbal_controller_firefly.yaml</code>.</p>

<h2 id="reading-the-qr-code">Reading the QR Code</h2>

<p>The QR code can be read using the <code class="language-plaintext highlighter-rouge">read_qr_code</code> node:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rosrun venky_controls read_qr_code -robot firefly
</code></pre></div></div>

<p>The node reads the image input from the topic <code class="language-plaintext highlighter-rouge">/firefly/camera1/image_raw</code>. This node utilizes the <code class="language-plaintext highlighter-rouge">quirc</code> library. The library decodes the qr code from the image input and prints the data. The library is capable of decoding multiple qr codes in a single image.</p>

<h2 id="depth-information">Depth Information</h2>

<p>The depth information can be visualized using the node <code class="language-plaintext highlighter-rouge">image_view</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> rosrun image_view image_view image:=/camera2/depth/image_raw
</code></pre></div></div>
<p><img class="size-medium wp-image-5866" src="../../../../../img/Pic2.png" alt="Simulation" width="600" height="400" /></p>

<p>The parameters of the depth camera (<code class="language-plaintext highlighter-rouge">libgazebo_ros_openni_kinect.so</code> plugin) can be found in the file: <code class="language-plaintext highlighter-rouge">rotors_description/urdf/firefly_camera_2axis_gimbal.xacro</code>.</p>

<h2>Video of the simulation:</h2>
<div id="outer" style="width:100%; margin:0 auto;text-align:center">  
  <iframe align="center" width="640" height="480" src="http://www.youtube.com/embed/f_W1JyT0N08" frameborder="0" allowfullscreen=""></iframe>
</div>
<p><br /></p>
:ET
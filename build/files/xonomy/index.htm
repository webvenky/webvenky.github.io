<!DOCTYPE HTML>
<html>
<head>
<style type="text/css">
  div.scroll-box {
  border: 1px solid black;
  height: 75%;
  overflow: scroll;
  font-family: sans-serif;
  line-height: 1.7em;
  }
  html, body{
    height: 100%;
  }
</style>

<script type="text/javascript" src="jquery-1.12.1.min.js"></script>
<script type="text/javascript" src="xonomy.js"></script>
<link type="text/css" rel="stylesheet" href="xonomy.css"/>
<script type="text/javascript">
var file_content= '';

function disableBtn() {
    document.getElementById("myBtn").disabled = true;
}

function undisableBtn() {
    document.getElementById("myBtn").disabled = false;
}

var loadSampleFile = function(event) {
          var file_content = "<launch><master auto='start'/><arg name='paused' default='true' /> <arg name='use_sim_time' default='true' /> <arg name='gui' default='true' /> <arg name='headless' default='false' /> <arg name='debug' default='false' /> <arg name='enable_logging' default='false'/> <arg name='enable_ground_truth' default='true'/> <arg name='log_file' default='pelican'/> <include file='$(find gazebo_ros)/launch/empty_world.launch'> <arg name='world_name' value='$(find mrp_p3dx_gazebo)/worlds/barca.world' /> <arg name='debug' value='$(arg debug)' /> <arg name='gui' value='$(arg gui)' /> <arg name='paused' value='$(arg paused)' /> <arg name='use_sim_time' value='$(arg use_sim_time)' /> <arg name='headless' value='$(arg headless)' /> </include> <param name='/time_const_prop_ctrl' type='double' value='3.0' /> <rosparam file='$(find mrp_p3dx_control)/config/mrp_suav.yaml' command='load' ns='/suav1' /><param name='robot_description' command=' $(find xacro)/xacro.py $(find rotors_description)/urdf/simple_airplane.xacro enable_logging:=$(arg enable_logging) enable_ground_truth:=$(arg enable_ground_truth) log_file:=$(arg log_file)' /><group ns='suav1'> <arg name='name' default='simple_airplane1'/> <arg name='model' default='$(find rotors_description)/urdf/simple_airplane.xacro'/> <arg name='tf_prefix' default='suav1'/> <arg name='x' default='10.0'/> <arg name='y' default='10.0'/> <arg name='z' default='5'/> <param name='tf_prefix' type='string' value='$(arg tf_prefix)' /> <param name='suav_altitude' type='double' value='$(arg z)' /> <param name='image_width' type='double' value='128' /> <param name='image_height' type='double' value='72' /> <param name='focal_length' type='double' value='105.567586495' /> <node name='simple_airplane' pkg='gazebo_ros' type='spawn_model' args='-param /robot_description -urdf -x $(arg x) -y $(arg y) -z $(arg z) -model $(arg name)' respawn='false' output='screen'> </node> <node pkg='robot_state_publisher' type='state_publisher' name='robot_state_publisher'> <param name='publish_frequency' type='double' value='30.0'/> <param name='tf_prefix' type='string' value='$(arg tf_prefix)'/> </node> </group> <node name='controller_spawner' pkg='controller_manager' type='spawner' respawn='false' ns='/suav1' output='screen' args=' camera_pan_controller camera_tilt_controller joint_state_controller' > </node> <node pkg='tf' type='static_transform_publisher' name='base_to_odom_suav1' args='0.0 -0.0 0.0 0.0 0.0 0.0 map suav1/odom 200' /> <node name='prop_control_suav1' pkg='mrp_p3dx_navn_code' type='prop_control' args='-robot suav1' /></launch>";
          console.log(file_content.substring(0, 200));
          start(file_content);
      };

var openFile = function(event) {
        var input = event.target;
        var reader = new FileReader();
        reader.onload = function(event){
          var file_content = reader.result;
          console.log(reader.result.substring(0, 200));
          start(file_content);
        };
        reader.readAsText(input.files[0]);
      };

function start(file_content) {
undisableBtn();
var docSpec={
	onchange: function(){
		console.log("I been changed now!")
	},
	validate: function(obj){
		console.log("I be validatin' now!")
	},
	elements: {
		"launch": {
			menu: [{
				caption: "Append a <group>",
				action: Xonomy.newElementChild,
				actionParameter: "<group/>"
				},
				{
				caption: "Append an <include>",
				action: Xonomy.newElementChild,
				actionParameter: "<include file='file_name'/>"
				},
				{
				caption: "Append an <arg>",
				action: Xonomy.newElementChild,
				actionParameter: "<arg name='some_name' default='default_value' />"
				},
				{
				caption: "Append a <node>",
				action: Xonomy.newElementChild,
				actionParameter: "<node pkg='pkg_name' type='type_name' name='node_name' />"
				},
				{
				caption: "Append a <param>",
				action: Xonomy.newElementChild,
				actionParameter: "<param name='some_name' default='default_value' />"
				},
				{
				caption: "Append a <remap>",
				action: Xonomy.newElementChild,
				actionParameter: "<remap remap from='some_name' to='some_name' />"
				},
				{
				caption: "Append a <env>",
				action: Xonomy.newElementChild,
				actionParameter: "<env name='environment_variable_name' value='environment_variable_value' />"
				}]
			},
		"master": {
			menu: [{
				caption: "Delete <master>",
				action: Xonomy.deleteElement
			}],
			attributes: {
			"auto": {
				asker: Xonomy.askPicklist,
				askerParameter: ["start", "restart", "no"]
				}
			},
		},
		"arg": {
			menu: [{
					caption: "Add @name=\"something\"",
					action: Xonomy.newAttribute,
					actionParameter: {name: "name", value: "something"},
					hideIf: function(jsElement){
					return jsElement.hasAttribute("name");
				}
				},{
					caption: "Add @default=\"something\"",
					action: Xonomy.newAttribute,
					actionParameter: {name: "default", value: "something"},
					hideIf: function(jsElement){
					return jsElement.hasAttribute("default");
				}
				},{
					caption: "Add @value=\"something\"",
					action: Xonomy.newAttribute,
					actionParameter: {name: "value", value: "something"},
					hideIf: function(jsElement){
					return jsElement.hasAttribute("value");
				}
				},{
				caption: "Delete <arg>",
				action: Xonomy.deleteElement
			}, {
				caption: "New <arg> before this",
				action: Xonomy.newElementBefore,
				actionParameter: "<arg name='some_name' default='default_value' />"
			}, {
				caption: "New <arg> after this",
				action: Xonomy.newElementAfter,
				actionParameter: "<arg name='some_name' default='default_value' />"
			}],
			canDropTo: ["launch","group","include"],
			attributes: {
			"name": {
				menu: [{
					caption: "Delete @name",
					action: Xonomy.deleteAttribute,
					hideIf: function(jsElement){
					return !jsElement.hasAttribute("name");
				}
				}],
				asker: Xonomy.askString,
				},
			"default": {
				asker: Xonomy.askString,
				},
			"value": {
				asker: Xonomy.askString,
				}
			},
		},
		"param": {
			menu: [{
				caption: "Delete <param>",
				action: Xonomy.deleteElement
			}, {
				caption: "New <param> before this",
				action: Xonomy.newElementBefore,
				actionParameter: "<param name='some_name' default='default_value' />"
			}, {
				caption: "New <param> after this",
				action: Xonomy.newElementAfter,
				actionParameter: "<param name='some_name' default='default_value' />"
			}],
			canDropTo: ["node","include"],
			attributes: {
			"name": {
				asker: Xonomy.askString,
				},
			"type": {
				asker: Xonomy.askString,
				},
			"value": {
				asker: Xonomy.askString,
				}
			},
		},
		"node": {
			menu: [{
				caption: "Delete <node>",
				action: Xonomy.deleteElement
			}, {
				caption: "New <node> before this",
				action: Xonomy.newElementBefore,
				actionParameter: "<node pkg='pkg_name' type='type_name' name='node_name' />"
			}, {
				caption: "New <node> after this",
				action: Xonomy.newElementAfter,
				actionParameter: "<node pkg='pkg_name' type='type_name' name='node_name' />"
			}, {
				caption: "Append an <param>",
				action: Xonomy.newElementChild,
				actionParameter: "<param name='some_name' type='type' value='value' />"
			}],
			canDropTo: ["launch","group"],
			attributes: {
			"name": {
				asker: Xonomy.askString,
				},
			"pkg": {
				asker: Xonomy.askString,
				},
			"type": {
				asker: Xonomy.askString,
				}
			},
		},
		"include": {
			menu: [{
				caption: "Delete <include>",
				action: Xonomy.deleteElement
			}],
			attributes: {
			"file": {
				asker: Xonomy.askString,
				}
			},
		},
		"group": {
			menu: [{
					caption: "Add @ns=\"robot_name\"",
					action: Xonomy.newAttribute,
					actionParameter: {name: "ns", value: "something"},
					hideIf: function(jsElement){
					return jsElement.hasAttribute("ns");
				}
				}, {
					caption: "Delete this <group>",
					action: Xonomy.deleteElement
				}, {
					caption: "New <group> before this",
					action: Xonomy.newElementBefore,
					actionParameter: "<group ns='name_space'/>"
				}, {
					caption: "New <group> after this",
					action: Xonomy.newElementAfter,
					actionParameter: "<group ns='name_space'/>"
				}, {
				caption: "Append an <include>",
				action: Xonomy.newElementChild,
				actionParameter: "<include file='file_name'/>"
				}],
			canDropTo: ["launch"],
			attributes: {
				"ns": {
				asker: Xonomy.askString  //onload="start()"
				}
			}
		}
	}
};
//console.log("+======++++=========+++++======++++=======+++++========+");
var xml = file_content.replace(/>(\n|\t|\s)*</g,'><').replace(/(\n|\t)*/g,'').replace(/\s\s+/g, ' ').replace(/['"]+/g, '\'');
//console.log(xml);
var editor=document.getElementById("editor");
Xonomy.setMode("laic"); //"nerd"
Xonomy.render(xml, editor, docSpec);
}
function saveTextAsFile()
{


	var fullPath = document.getElementById('upload').value;
	if (fullPath) {
		var startIndex = (fullPath.indexOf('\\') >= 0 ? fullPath.lastIndexOf('\\') : fullPath.lastIndexOf('/'));
		var filename = fullPath.substring(startIndex);
		if (filename.indexOf('\\') === 0 || filename.indexOf('/') === 0) {
			filename = filename.substring(1);
		}
	}
	var textToWrite_unformatted=Xonomy.harvest();
	var textToWrite = formatXml(textToWrite_unformatted);
	console.log(textToWrite);
	var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
	var fileNameToSaveAs = filename;

	var downloadLink = document.createElement("a");
	downloadLink.download = fileNameToSaveAs;
	downloadLink.innerHTML = "Save File";
	if (window.webkitURL != null)
	{
		// Chrome allows the link to be clicked
		// without actually adding it to the DOM.
		downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
	}
	else
	{
		// Firefox requires the link to be added to the DOM
		// before it can be clicked.
		downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
		downloadLink.onclick = destroyClickedElement;
		downloadLink.style.display = "none";
		document.body.appendChild(downloadLink);
	}

	downloadLink.click();
}
function destroyClickedElement(event)
{
	document.body.removeChild(event.target);
}
function formatXml(xml) {
    var formatted = '';
    var reg = /(>)(<)(\/*)/g;
    xml = xml.replace(reg, '$1\r\n$2$3');
    var pad = 0;
    jQuery.each(xml.split('\r\n'), function(index, node) {
        var indent = 0;
        if (node.match( /.+<\/\w[^>]*>$/ )) {
            indent = 0;
        } else if (node.match( /^<\/\w/ )) {
            if (pad != 0) {
                pad -= 1;
            }
        } else if (node.match( /^<\w[^>]*[^\/]>.*$/ )) {
            indent = 1;
        } else {
            indent = 0;
        }

        var padding = '';
        for (var i = 0; i < pad; i++) {
            padding += '  ';
        }

        formatted += padding + node + '\r\n';
        pad += indent;
    });

    return formatted;
}
</script>
</head>
<body onload="disableBtn()">
<h1>View and edit ros launch files easily!!</h1>
<input id="upload" type='file' onchange='openFile(event)'>
or <button id="myBtn2" onclick="loadSampleFile()">Load Sample ROSLAUNCH File</button>
<hr>
<div id="editor" class="scroll-box" ></div>
<button id="myBtn" onclick="saveTextAsFile()">Save File</button>
</body>
</html>
